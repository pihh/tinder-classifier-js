{"id":"src/scripts/script.js","dependencies":[{"name":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\.babelrc","includedInParent":true,"mtime":1570486251700},{"name":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\package.json","includedInParent":true,"mtime":1570486251711},{"name":"@babel/runtime-corejs2/regenerator","parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\node_modules\\@babel\\runtime-corejs2\\regenerator\\index.js"},{"name":"@babel/runtime-corejs2/helpers/asyncToGenerator","parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\node_modules\\@babel\\runtime-corejs2\\helpers\\asyncToGenerator.js"},{"name":"@babel/runtime-corejs2/helpers/classCallCheck","parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\node_modules\\@babel\\runtime-corejs2\\helpers\\classCallCheck.js"},{"name":"@babel/runtime-corejs2/helpers/createClass","parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\node_modules\\@babel\\runtime-corejs2\\helpers\\createClass.js"},{"name":"./data.js","loc":{"line":1,"column":26},"parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\data.js"},{"name":"./constants","loc":{"line":2,"column":26},"parent":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\script.js","resolved":"C:\\Development\\Development\\playgrounds\\tinder-classifier\\public\\src\\scripts\\constants.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Script = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _data = require(\"./data.js\");\n\nvar _constants = require(\"./constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Script =\n/*#__PURE__*/\nfunction () {\n  function Script() {\n    (0, _classCallCheck2.default)(this, Script);\n  }\n\n  (0, _createClass2.default)(Script, [{\n    key: \"showExamples\",\n    value: function () {\n      var _showExamples = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(data) {\n        var surface;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Create a container in the visor\n                surface = tfvis.visor().surface({\n                  name: \"Input Data Examples\",\n                  tab: \"Input Data\"\n                }); // Get the examples\n                // const examples = data.nextTestBatch(20);\n                // const numExamples = examples.xs.shape[0];\n                // Create a canvas element to render each example\n                // for (let i = 0; i < numExamples; i++) {\n                //   const imageTensor = tf.tidy(() => {\n                //     // Reshape the image to 28x28 px\n                //     return examples.xs\n                //       .slice([i, 0], [1, examples.xs.shape[1]])\n                //       .reshape([28, 28, 1]);\n                //   });\n                //\n                //   const canvas = document.createElement(\"canvas\");\n                //   canvas.width = 28;\n                //   canvas.height = 28;\n                //   canvas.style = \"margin: 4px;\";\n                //   await tf.browser.toPixels(imageTensor, canvas);\n                //   surface.drawArea.appendChild(canvas);\n                //\n                //   imageTensor.dispose();\n                // }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function showExamples(_x) {\n        return _showExamples.apply(this, arguments);\n      }\n\n      return showExamples;\n    }()\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2() {\n        var data;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = new _data.MnistData();\n                _context2.next = 3;\n                return data.load();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"train\",\n    value: function () {\n      var _train = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(model, data) {\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function train(_x2, _x3) {\n        return _train.apply(this, arguments);\n      }\n\n      return train;\n    }()\n  }, {\n    key: \"showAccuracy\",\n    value: function () {\n      var _showAccuracy = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(model, data) {\n        return _regenerator.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function showAccuracy(_x4, _x5) {\n        return _showAccuracy.apply(this, arguments);\n      }\n\n      return showAccuracy;\n    }()\n  }, {\n    key: \"showConfusion\",\n    value: function () {\n      var _showConfusion = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(model, data) {\n        return _regenerator.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function showConfusion(_x6, _x7) {\n        return _showConfusion.apply(this, arguments);\n      }\n\n      return showConfusion;\n    }()\n  }, {\n    key: \"getModel\",\n    value: function getModel() {}\n  }]);\n  return Script;\n}();\n\nexports.Script = Script;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":16,"column":0},"source":"src/scripts/script.js","original":{"line":1,"column":0}},{"generated":{"line":18,"column":0},"source":"src/scripts/script.js","original":{"line":2,"column":0}},{"name":"Script","generated":{"line":22,"column":4},"source":"src/scripts/script.js","original":{"line":4,"column":13}},{"generated":{"line":25,"column":0},"source":"src/scripts/script.js","original":{"line":5,"column":2}},{"generated":{"line":25,"column":20},"source":"src/scripts/script.js","original":{"line":5,"column":16}},{"generated":{"line":26,"column":0},"source":"src/scripts/script.js","original":{"line":5,"column":16}},{"generated":{"line":27,"column":0},"source":"src/scripts/script.js","original":{"line":5,"column":18}},{"name":"data","generated":{"line":34,"column":49},"source":"src/scripts/script.js","original":{"line":7,"column":21}},{"generated":{"line":40,"column":0},"source":"src/scripts/script.js","original":{"line":8,"column":4}},{"name":"surface","generated":{"line":41,"column":0},"source":"src/scripts/script.js","original":{"line":9,"column":10}},{"name":"surface","generated":{"line":41,"column":16},"source":"src/scripts/script.js","original":{"line":9,"column":10}},{"name":"tfvis","generated":{"line":41,"column":26},"source":"src/scripts/script.js","original":{"line":9,"column":20}},{"generated":{"line":41,"column":31},"source":"src/scripts/script.js","original":{"line":9,"column":25}},{"name":"visor","generated":{"line":41,"column":32},"source":"src/scripts/script.js","original":{"line":10,"column":7}},{"generated":{"line":41,"column":37},"source":"src/scripts/script.js","original":{"line":9,"column":20}},{"name":"surface","generated":{"line":41,"column":40},"source":"src/scripts/script.js","original":{"line":11,"column":7}},{"generated":{"line":41,"column":47},"source":"src/scripts/script.js","original":{"line":9,"column":20}},{"generated":{"line":41,"column":48},"source":"src/scripts/script.js","original":{"line":11,"column":15}},{"name":"name","generated":{"line":42,"column":0},"source":"src/scripts/script.js","original":{"line":11,"column":17}},{"name":"name","generated":{"line":42,"column":18},"source":"src/scripts/script.js","original":{"line":11,"column":17}},{"generated":{"line":42,"column":22},"source":"src/scripts/script.js","original":{"line":11,"column":21}},{"generated":{"line":42,"column":24},"source":"src/scripts/script.js","original":{"line":11,"column":23}},{"generated":{"line":42,"column":45},"source":"src/scripts/script.js","original":{"line":11,"column":15}},{"name":"tab","generated":{"line":43,"column":0},"source":"src/scripts/script.js","original":{"line":11,"column":46}},{"name":"tab","generated":{"line":43,"column":18},"source":"src/scripts/script.js","original":{"line":11,"column":46}},{"generated":{"line":43,"column":21},"source":"src/scripts/script.js","original":{"line":11,"column":49}},{"generated":{"line":43,"column":23},"source":"src/scripts/script.js","original":{"line":11,"column":51}},{"generated":{"line":44,"column":0},"source":"src/scripts/script.js","original":{"line":11,"column":15}},{"generated":{"line":44,"column":17},"source":"src/scripts/script.js","original":{"line":9,"column":20}},{"generated":{"line":44,"column":20},"source":"src/scripts/script.js","original":{"line":13,"column":4}},{"generated":{"line":45,"column":0},"source":"src/scripts/script.js","original":{"line":14,"column":4}},{"generated":{"line":46,"column":0},"source":"src/scripts/script.js","original":{"line":15,"column":4}},{"generated":{"line":47,"column":0},"source":"src/scripts/script.js","original":{"line":17,"column":4}},{"generated":{"line":48,"column":0},"source":"src/scripts/script.js","original":{"line":18,"column":4}},{"generated":{"line":49,"column":0},"source":"src/scripts/script.js","original":{"line":19,"column":4}},{"generated":{"line":50,"column":0},"source":"src/scripts/script.js","original":{"line":20,"column":4}},{"generated":{"line":51,"column":0},"source":"src/scripts/script.js","original":{"line":21,"column":4}},{"generated":{"line":52,"column":0},"source":"src/scripts/script.js","original":{"line":22,"column":4}},{"generated":{"line":53,"column":0},"source":"src/scripts/script.js","original":{"line":23,"column":4}},{"generated":{"line":54,"column":0},"source":"src/scripts/script.js","original":{"line":24,"column":4}},{"generated":{"line":55,"column":0},"source":"src/scripts/script.js","original":{"line":25,"column":4}},{"generated":{"line":56,"column":0},"source":"src/scripts/script.js","original":{"line":26,"column":4}},{"generated":{"line":57,"column":0},"source":"src/scripts/script.js","original":{"line":27,"column":4}},{"generated":{"line":58,"column":0},"source":"src/scripts/script.js","original":{"line":28,"column":4}},{"generated":{"line":59,"column":0},"source":"src/scripts/script.js","original":{"line":29,"column":4}},{"generated":{"line":60,"column":0},"source":"src/scripts/script.js","original":{"line":30,"column":4}},{"generated":{"line":61,"column":0},"source":"src/scripts/script.js","original":{"line":31,"column":4}},{"generated":{"line":62,"column":0},"source":"src/scripts/script.js","original":{"line":32,"column":4}},{"generated":{"line":63,"column":0},"source":"src/scripts/script.js","original":{"line":33,"column":4}},{"generated":{"line":64,"column":0},"source":"src/scripts/script.js","original":{"line":34,"column":4}},{"name":"data","generated":{"line":91,"column":0},"source":"src/scripts/script.js","original":{"line":38,"column":10}},{"name":"data","generated":{"line":91,"column":16},"source":"src/scripts/script.js","original":{"line":38,"column":10}},{"generated":{"line":91,"column":23},"source":"src/scripts/script.js","original":{"line":38,"column":17}},{"name":"MnistData","generated":{"line":91,"column":27},"source":"src/scripts/script.js","original":{"line":38,"column":21}},{"generated":{"line":91,"column":42},"source":"src/scripts/script.js","original":{"line":38,"column":17}},{"name":"data","generated":{"line":93,"column":23},"source":"src/scripts/script.js","original":{"line":39,"column":10}},{"generated":{"line":93,"column":27},"source":"src/scripts/script.js","original":{"line":39,"column":14}},{"name":"load","generated":{"line":93,"column":28},"source":"src/scripts/script.js","original":{"line":39,"column":15}},{"generated":{"line":93,"column":32},"source":"src/scripts/script.js","original":{"line":39,"column":10}},{"name":"model","generated":{"line":114,"column":50},"source":"src/scripts/script.js","original":{"line":50,"column":14}},{"name":"data","generated":{"line":114,"column":57},"source":"src/scripts/script.js","original":{"line":50,"column":21}},{"name":"model","generated":{"line":137,"column":50},"source":"src/scripts/script.js","original":{"line":52,"column":21}},{"name":"data","generated":{"line":137,"column":57},"source":"src/scripts/script.js","original":{"line":52,"column":28}},{"name":"model","generated":{"line":160,"column":50},"source":"src/scripts/script.js","original":{"line":54,"column":22}},{"name":"data","generated":{"line":160,"column":57},"source":"src/scripts/script.js","original":{"line":54,"column":29}},{"generated":{"line":180,"column":31},"source":"src/scripts/script.js","original":{"line":56,"column":13}},{"generated":{"line":180,"column":32},"source":"src/scripts/script.js","original":{"line":56,"column":15}}],"sources":{"src/scripts/script.js":"import { MnistData } from \"./data.js\";\r\nimport { CONSTANTS } from \"./constants\";\r\n\r\nexport class Script {\r\n  constructor() {}\r\n\r\n  async showExamples(data) {\r\n    // Create a container in the visor\r\n    const surface = tfvis\r\n      .visor()\r\n      .surface({ name: \"Input Data Examples\", tab: \"Input Data\" });\r\n\r\n    // Get the examples\r\n    // const examples = data.nextTestBatch(20);\r\n    // const numExamples = examples.xs.shape[0];\r\n\r\n    // Create a canvas element to render each example\r\n    // for (let i = 0; i < numExamples; i++) {\r\n    //   const imageTensor = tf.tidy(() => {\r\n    //     // Reshape the image to 28x28 px\r\n    //     return examples.xs\r\n    //       .slice([i, 0], [1, examples.xs.shape[1]])\r\n    //       .reshape([28, 28, 1]);\r\n    //   });\r\n    //\r\n    //   const canvas = document.createElement(\"canvas\");\r\n    //   canvas.width = 28;\r\n    //   canvas.height = 28;\r\n    //   canvas.style = \"margin: 4px;\";\r\n    //   await tf.browser.toPixels(imageTensor, canvas);\r\n    //   surface.drawArea.appendChild(canvas);\r\n    //\r\n    //   imageTensor.dispose();\r\n    // }\r\n  }\r\n\r\n  async run() {\r\n    const data = new MnistData();\r\n    await data.load();\r\n    // await this.showExamples(data);\r\n\r\n    // const model = this.getModel();\r\n    // tfvis.show.modelSummary({ name: \"Model Architecture\" }, model);\r\n    //\r\n    // await this.train(model, data);\r\n    // await this.showAccuracy(model, data);\r\n    // await this.showConfusion(model, data);\r\n  }\r\n\r\n  async train(model, data) {}\r\n\r\n  async showAccuracy(model, data) {}\r\n\r\n  async showConfusion(model, data) {}\r\n\r\n  getModel() {}\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"c715248932e49e5db2ccabe5f17a9a0c","cacheData":{"env":{}}}